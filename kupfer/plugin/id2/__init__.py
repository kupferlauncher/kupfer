""" ID2 â€“ Guess Identifier (Kupfer Plugin). See https://id2.dev
"""
__kupfer_name__ = _("Identifier Resolver")
__kupfer_sources__ = ()
__kupfer_text_sources__ = ("IdentifierSource",)
__kupfer_actions__ = ("LookupID",)
__description__ = _(
    """Detect and open DOIs, ISBNs, OrcIDs, crypto-addresses, geo-coordinates, and more in your web-browser. Examples:

- Unicode:  \t"U+1F194"
- UnixTime: \t"1606324253"
- Location: \t"8FWH4HX8+QR"
- DOI:    \t\t"10.1109/FDL.2018.8524068"
- OrcID:    \t"0000-0002-0006-7761"
- BitCoin:  \t"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"

For a full list, see https://id2.dev

To disable a certain ID, write a single character (e.g. "x") into the URL field below.
"""
)
__version__ = "2022.1"
__author__ = "Emanuel Regnath"


from kupfer import utils, plugin_support
from kupfer.objects import Action, TextLeaf, TextSource
import re
import json
import os
import urllib.parse


# global table holding identifier classes and icon names
CLASS_NAMES = {
    "i": ["Identifier", "edit-find"],
    "g": ["Geo-Location", "applications-internet"],
    "d": ["Document", "x-office-document"],
    "o": ["Object", "package-x-generic"],
    "h": ["Hash", "dialog-password"],
    "t": ["Time", "x-office-calendar"],
    "w": ["Person", "stock_person"],
}

# global id2data
ID2_JSON_FILE = os.path.join(os.path.dirname(__file__), "id2data.json")
id2data = {}


# settings are auto-generated by "id2-settings-generator.py"
__kupfer_settings__ = plugin_support.PluginSettings(
    {
        "key": "i_ip4",
        "label": "IP4",
        "type": str,
        "value": "https://whois.domaintools.com/",
    },
    {
        "key": "i_ip6",
        "label": "IP6",
        "type": str,
        "value": "https://whois.domaintools.com/",
    },
    {
        "key": "i_utf8",
        "label": "UTF8",
        "type": str,
        "value": "https://www.compart.com/en/unicode/U+",
    },
    {
        "key": "g_gps",
        "label": "GPS",
        "type": str,
        "value": "https://www.google.com/maps/search/",
    },
    {
        "key": "o_ean",
        "label": "EAN",
        "type": str,
        "value": "https://www.ean-search.org/?q=",
    },
    {
        "key": "o_upc",
        "label": "UPC",
        "type": str,
        "value": "https://www.ean-search.org/?q=",
    },
    {"key": "o_asin", "label": "ASIN", "type": str, "value": "https://amzn.com/"},
)


# kupfer setting keys must not have colons
def _settings_key(key: str):
    return key.replace(":", "_")


def _guess_id(token: str):
    """Test if "token" matches the regex of any identifier and return all found types."""
    token = token.strip()
    for key, entry in id2data.items():
        setkey = _settings_key(key)
        if setkey in __kupfer_settings__ and len(__kupfer_settings__[setkey]) < 2:
            continue
        if len(token) in entry["lens"]:
            match = re.match(r"^" + entry["re"] + r"$", token)
            if match:
                entry["part"] = match.group(1)
                yield entry["id"]


def _load_and_parse_id2data():
    """load id2data and parse "len" key string to a list of integers (speed)"""
    global id2data
    id2data = json.load(open(ID2_JSON_FILE, "r"))
    for key, entry in id2data.items():
        lens = []
        parts = entry["len"].split(",")
        for part in parts:
            nums = part.split("-")
            imin = int(nums[0])
            if len(nums) == 2:
                if nums[1] == "":
                    nums[1] = "40"
                imax = int(nums[1])
                lens = list(range(imin, imax + 1))
            else:
                lens.append(imin)

        id2data[key]["lens"] = lens


class IdentifierLeaf(TextLeaf):
    def __init__(self, id2key, token):
        TextLeaf.__init__(self, token)
        self.id2key = id2key
        self.id2cls = id2key[0]

    # overwrite hash to distinguish different IDs
    def __hash__(self):
        return hash(str(self.id2key) + str(self.object))

    def get_actions(self):
        yield LookupID()

    def get_icon_name(self):
        return CLASS_NAMES[self.id2cls][1]

    def get_description(self):
        return "{} ID: {}".format(
            CLASS_NAMES[self.id2cls][0], id2data[self.id2key]["desc"]
        )


class IdentifierSource(TextSource):
    def __init__(self):
        TextSource.__init__(self, name=_("ID2 Identifiers"))

    def get_text_items(self, text):
        if len(text) < 5:
            return None
        for id2key in _guess_id(text):
            yield IdentifierLeaf(id2key, text)

    def provides(self):
        yield IdentifierLeaf

    def get_rank(self):
        return 42


class LookupID(Action):
    def __init__(self):
        Action.__init__(self, name=_("Open in Browser"))
        self.rank_adjust = 5  # default action for IdentifierLeaf

    def activate(self, leaf):
        """Called when item is selected via Enter/click"""
        entry = id2data[leaf.id2key]
        if _settings_key(leaf.id2key) in __kupfer_settings__:
            url_prefix = __kupfer_settings__[_settings_key(leaf.id2key)]
        else:
            url_prefix = entry["url"]
        utils.show_url(url_prefix + entry["part"])

    def item_types(self):
        yield IdentifierLeaf

    def get_description(self):
        return _("Resolve this ID using a WebService")

    def get_icon_name(self):
        return "web-browser"


def initialize_plugin(name):
    _load_and_parse_id2data()
